// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/usecase/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/VieiraVitor/transaction-flow/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountUseCase is a mock of AccountUseCase interface.
type MockAccountUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAccountUseCaseMockRecorder
}

// MockAccountUseCaseMockRecorder is the mock recorder for MockAccountUseCase.
type MockAccountUseCaseMockRecorder struct {
	mock *MockAccountUseCase
}

// NewMockAccountUseCase creates a new mock instance.
func NewMockAccountUseCase(ctrl *gomock.Controller) *MockAccountUseCase {
	mock := &MockAccountUseCase{ctrl: ctrl}
	mock.recorder = &MockAccountUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountUseCase) EXPECT() *MockAccountUseCaseMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountUseCase) CreateAccount(ctx context.Context, documentNumber string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, documentNumber)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountUseCaseMockRecorder) CreateAccount(ctx, documentNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountUseCase)(nil).CreateAccount), ctx, documentNumber)
}

// GetAccount mocks base method.
func (m *MockAccountUseCase) GetAccount(ctx context.Context, accountID int64) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountID)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountUseCaseMockRecorder) GetAccount(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountUseCase)(nil).GetAccount), ctx, accountID)
}

// MockTransactionUseCase is a mock of TransactionUseCase interface.
type MockTransactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionUseCaseMockRecorder
}

// MockTransactionUseCaseMockRecorder is the mock recorder for MockTransactionUseCase.
type MockTransactionUseCaseMockRecorder struct {
	mock *MockTransactionUseCase
}

// NewMockTransactionUseCase creates a new mock instance.
func NewMockTransactionUseCase(ctrl *gomock.Controller) *MockTransactionUseCase {
	mock := &MockTransactionUseCase{ctrl: ctrl}
	mock.recorder = &MockTransactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionUseCase) EXPECT() *MockTransactionUseCaseMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionUseCase) CreateTransaction(ctx context.Context, accountID int64, operationTypeID int, amount float64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, accountID, operationTypeID, amount)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionUseCaseMockRecorder) CreateTransaction(ctx, accountID, operationTypeID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionUseCase)(nil).CreateTransaction), ctx, accountID, operationTypeID, amount)
}
